help(stepAIC)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
setwd("~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1")
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
available.packages()
updateR()
library(installr)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
setRepositories()
ap = available.packages()
view(ap)
View(ap)
data()
install.packages(installr)
install.packages("installr)
""
install.packages("installr")
library(installr)
updateR()
setRepositories()
setRepositories()
ap = available.packages()
View(ap)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
View(channel_values)
View(ap)
setRepositories()
setRepositories()
setRepositories()
setRepositories()
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
install.packages("MASS")
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
matrix(1:10, ncol=2)
Dataframe[, 2:101]
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
View(channel_values_ridge)
View(channel_values)
View(channel_values_ridge)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
View(ridge_model)
channel_values_ridge = as.matrix(channel_values[,-1])
ridge_model = glmnet(channel_values_ridge, fat, alpha=0, family="gaussian")
plot(ridge_model, xvar="lambda", label=TRUE)
scale(Dataframe[,colno_fat])
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab1/Lab1_Assignment4.R', echo=TRUE)
print(lasso_model_optimal$lambda.min)
lasso_model_optimal = cv.glmnet(as.matrix(covariates), response, alpha=1, family="gaussian", lambda=seq(0,1,0.01))
lasso_model_optimal$lambda.min
plot(lasso_model_optimal)
lasso_model_optimal = cv.glmnet(as.matrix(covariates), response, alpha=1, family="gaussian", lambda=seq(0,1,0.001))
lasso_model_optimal$lambda.min
plot(lasso_model_optimal)
lasso_model_optimal = cv.glmnet(as.matrix(covariates), response, alpha=1, family="gaussian", lambda=seq(0,1,0.00001))
lasso_model_optimal$lambda.min
plot(lasso_model_optimal)
warnings()
lasso_model_optimal = cv.glmnet(as.matrix(covariates), response, alpha=1, family="gaussian", lambda=seq(0,1,0.001))
lasso_model_optimal$lambda.min
plot(lasso_model_optimal)
