long = data$longitude
points = data.frame(lat,long)
u = distHaversine(place, points)/h
print(u)
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, data, h_distance)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
data$latitude
data$longitude
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
kernel_dist = gaussian_dist(placeOI, data, h_distance)
for (time in timesOI) {
data = filter_posterior(dateOI, time, st)
kernel_dist = gaussian_dist(placeOI, data, h_distance)
for (time in timesOI) {
data = filter_posterior(dateOI, time, st)
kernel_dist = gaussian_dist(placeOI, data, h_distance)
kernel_day = gaussian_day(dateOI, data, h_date)
kernel_time = gaussian_hour(time, data, h_time)
sum_kernel = kernel_dist+kernel_day+kernel_time
nominator_sum = sum(sum_kernel * data$temperature)
denominator_sum = sum(sum_kernel)
mult_kernel = kernel_dist*kernel_day*kernel_time
nominator_mult = sum(mult_kernel * data$temperature)
denominator_mult = sum(mult_kernel)
kernel_sum = c(kernel_sum, nominator_sum/denominator_sum)
kernel_mult = c(kernel_mult, nominator_mult/denominator_mult)
}
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
View(data)
View(data)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
View(data)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
long = data$longitude
points = data.frame(lat,long)
u = distHaversine(place, points)/h
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
u = distHaversine(place, points)/h
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
print(u)
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
print(u)
print(exp(-u^2))
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
x = c(2, 2)
x^2
exp(x)
exp(-x^2)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
print(u)
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
print(-u^2)
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
print(exp(-u^2))
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
k = exp(-u^2)
print(k)
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, filtered_data, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
print(lat)
long = data$longitude
print(long)
points = data.frame(lat,long)
print(points)
u = distHaversine(place, points)/h
return (exp(-u^2))
}
xy = gaussian_dist(placeOI, st, h_distance)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
long = data$longitude
points = data.frame(lat,long)
u = distHaversine(place, points)/h
print(u)
return (u)
}
xy = gaussian_dist(placeOI, st, h_distance)
exp(-xy)
exp(xy)
#A gaussian function for the difference in distance
gaussian_dist = function(place, data, h) {
lat = data$latitude
long = data$longitude
points = data.frame(lat,long)
u = distHaversine(points, place)/h
print(u)
return (u)
}
xy = gaussian_dist(placeOI, st, h_distance)
exp(u)
exp(xy)
exp(-xy)
c(34076, 34076)
x = c(34076, 34076)
exp(x)
exp(-x)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
View(data)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="o", main="Plot of distances with specific h")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of distances with specific h")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates")
}
date = seq(0,182,1)
plotDist(date, h_date)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates")
}
date = seq(0,182,1)
plotTime(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time")
}
time = seq(0,12,1)
plotTime(date, h_date)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
help(axis)
plot(kernel_sum, type="o", main ="Temperature estimate through sum of Kernels")
axis(1, 1:length(timesOI), labels(timesOI))
plot(kernel_sum, type="o", main ="Temperature estimate through sum of Kernels")
axis(1, at=1:length(timesOI), labels=timesOI)
length(timesOI)
plot(kernel_sum, type="o", main ="Temperature estimate through sum of Kernels", xlab="Time",
ylab="Est. temperature")
axis(1, at=1:length(timesOI), labels=timesOI)
plot(kernel_sum, type="o", main ="Temperature estimate through sum of factors", xlab="Time",
ylab="Est. temperature")
axis(1, at=1:length(timesOI), labels=timesOI)
plot(kernel_mult, type="o", main="Temperature estimate through product of factors", xlab="Time",
ylab="Est. temperature")
axis(1, at=1:length(timesOI), labels(timesOI))
help(distHaversine)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
set.seed(1234567890)
#install.packages("geosphere")
library(geosphere)
stations <- read.csv("stations.csv")
temps <- read.csv("temps50k.csv")
#A join operation on "station_number"
st <- merge(stations,temps,by="station_number")
n = dim(st)[1]
#Kernel weighting factors
h_distance <- 100
h_date <- 10
h_time <- 2
#Latitude of interest
a <- 59.4059
#Longitude of interest
b <- 18.0256
#Coordinates for Danderyd
#Create a vector of the point of interest
placeOI = c(a, b)
dateOI <- as.Date("2019-11-04") # The date to predict (up to the students)
timesOI = c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00",
"22:00:00", "24:00:00")
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
h_distance <- 1000
h_date <- 10
h_time <- 2
#Latitude of interest
a <- 59.4059
#Longitude of interest
b <- 18.0256
#Coordinates for Danderyd
#Create a vector of the point of interest
placeOI = c(a, b)
dateOI <- as.Date("2019-11-04") # The date to predict (up to the students)
timesOI = c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00",
"22:00:00", "24:00:00")
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
h_distance <- 10000
h_date <- 10
h_time <- 2
#Latitude of interest
a <- 59.4059
#Longitude of interest
b <- 18.0256
#Coordinates for Danderyd
#Create a vector of the point of interest
placeOI = c(a, b)
dateOI <- as.Date("2019-11-04") # The date to predict (up to the students)
timesOI = c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00",
"22:00:00", "24:00:00")
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
#Remove posterior data
filter_posterior = function(date, time, data){
return(data[which(as.numeric(difftime(strptime(paste(date, time, sep=" "), format="%Y-%m-%d %H:%M:%S"),
strptime(paste(data$date, data$time, sep=" "),format="%Y-%m-%d %H:%M:%S")))>0), ])
}
h_distance <- 10000
h_date <- 10
h_time <- 6
#Latitude of interest
a <- 59.4059
#Longitude of interest
b <- 18.0256
#Coordinates for Danderyd
#Create a vector of the point of interest
placeOI = c(a, b)
dateOI <- as.Date("2019-11-04") # The date to predict (up to the students)
timesOI = c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00",
"22:00:00", "24:00:00")
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_date)
time = seq(0,12,1)
plotTime(time, h_time)
h_distance <- 10000
h_date <- 10
h_time <- 2
#Latitude of interest
a <- 59.4059
#Longitude of interest
b <- 18.0256
#Coordinates for Danderyd
#Create a vector of the point of interest
placeOI = c(a, b)
dateOI <- as.Date("2019-11-04") # The date to predict (up to the students)
timesOI = c("04:00:00", "06:00:00", "08:00:00", "10:00:00", "12:00:00", "14:00:00", "16:00:00", "18:00:00", "20:00:00",
"22:00:00", "24:00:00")
plotDist = function(dist, h){
u = dist/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for distances", xlab="Distance")
}
dist = seq(0,30000,1)
plotDist(dist, h_distance)
plotDate = function(date, h){
u = date/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for dates", xlab="Days")
}
date = seq(0,182,1)
plotDate(date, h_date)
plotTime = function(time, h){
u = time/h
plot(exp(-u^2), type="l", main="Plot of kernel wights for time", xlab="Hours")
}
time = seq(0,12,1)
plotTime(time, h_time)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
sum_kernel
sum_kernel%*%filtered_data$air_temperature
sum(sum_kernel%*%filtered_data$air_temperature)
mult_kernel%*%filtered_data$air_temperature
filtered_data$air_temperature%*%sum_kernel
sum_kernel*filtered_data$air_temperature
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
sum(sum_kernel*filtered_data$air_temperature)
sum(sum_kernel*filtered_data$air_temperature)/sum(sum_kernel)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
kernel_time
kernel_dist
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Lab3 Block 1/Lab3_Assignment1.R', echo=TRUE)
sum_kernel*filtered_data$air_temperature
