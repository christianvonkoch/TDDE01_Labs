res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
help(boot)
View(res)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=data)
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
print(predictedVisitors)
return(predictedVisitors)
}
res=boot(seq(12,13,0.05), statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=seq(12,13,0.05)),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=as.data.frame(seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(Dataframe)
as.data.frame(Time=seq(1,2,0.1))
length(seq(12,13,0.05))
as.matrix(seq(12,13,0.05))
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=as.matrix(seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data.frame(Time=seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=21
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(res)
View(e)
data.frame(Time=seq(12,13,0.05))
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=21
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="grey")
help(points)
help(curve)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", lty=21, col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", lty=21, col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
plot(seq(12,13,0.05), e$point[2,], type="l", col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
plot(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
View(e)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=12, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=12, col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=length(seq(12,13,0.05))
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
min_value_13=exp(e$point[2,21])
max_value_13=exp(e$point[1,21])
help("cat)
help(cat)
help("cat")
cat("The bank should expect between", min_value_13, "and", max_value_13, "customers", sep=" ")
source('~/SKOLA/LIU/Åk 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
help(envelope)
library(boot)
help(envelope)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
plot(res)
seq(12,13,0.05)
View(Dataframe)
library(neuralnet)
help(neuralnet)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=2)
View(svmmodel)
cross(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=10)
cross(ksvm)
cross(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1)
View(svmmodel)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1, cross=10)
View(svmmodel)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1, cross=5)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1, cross=10)
View(svmmodel)
View(svmmodel)
svmmodel=ksvm(type~., data=fold2, kernel="rbfdot", C=1, cross=5)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=2)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1)
View(svmmodel)
predict(ksvm, newdata=fold1, type="response")
y=predict(svmmodel, newdata=fold1, type="response")
View(fold1)
y
m=table(fold1$type, y)
missclass(m, y)
missclass(m, fold1)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=100)
View(svmmodel)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=10)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=100)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=10)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=3)
View(svmmodel)
svmmodel=ksvm(type~., data=fold1, kernel="rbfdot", C=1, cross=500)
View(svmmodel)
help(glm)
help(factor)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/2019-01-16")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2019-01-16/2019-01-16_Assignment2.R', echo=TRUE)
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 3)
tr <- data.frame(Var, Sin=sin(Var))
Var <- runif(50, 3, 9)
te <- data.frame(Var, Sin=sin(Var))
n = dim(tr)[1]
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(10, -1, 1)
nn=neuralnet(Sin~Var, data=tr, hidden=3, startweights=winit)
plot(nn)
pred=predict(nn, newdata=te)
plot(tr$Var, tr$Sin, xlim=c(0,9), ylim=c(-2,2), xlab="Var", ylab="Sin")
points(te$Var, te$Sin, col="blue")
points(te$Var, pred, col="red")
##Answer: The plot resembles the one given so it is confirmed.
##In the previous figure, it is not surprising the poor performance on the range [3,9] because no training point falls
##in that interval. However, it seems that the predictions converge to -2 as the value of Var increases. Why do they
##converge to that particular value ? To answer this question, you may want to look into the weights of the NN
##learned.
plot(nn)
help(tree'')
help(tree)
library(tree)
help(tree)
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 3)
tr <- data.frame(Var, Sin=sin(Var))
Var <- runif(50, 3, 9)
te <- data.frame(Var, Sin=sin(Var))
n = dim(tr)[1]
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(10, -1, 1)
nn=neuralnet(Sin~Var, data=tr, hidden=3, startweights=winit)
plot(nn)
pred=predict(nn, newdata=te)
plot(tr$Var, tr$Sin, xlim=c(0,9), ylim=c(-2,2), xlab="Var", ylab="Sin")
points(te$Var, te$Sin, col="blue")
points(te$Var, pred, col="red")
help("neuralnet")
help(par)
help(points)
help(plot)
plot(train$Var, train$Sin, col = 'black', ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(test$Var, test$Sin, col = 'blue', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(test$Var, predictTest, col = 'red', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
plot(train$Var, train$Sin, col = 'black', ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(test$Var, test$Sin, col = 'blue', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(test$Var, pred, col = 'red', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
plot(tr$Var, tr$Sin, col = 'black', ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(te$Var, te$Sin, col = 'blue', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(te$Var, pred, col = 'red', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
plot(tr$Var, tr$Sin, col = 'black', ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(te$Var, te$Sin, col = 'blue', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
par(new = TRUE)
plot(te$Var, pred, col = 'red', xlab="", ylab="", axes=FALSE, ylim = c(-2,2), xlim = c(0,9))
plot(tr$Var, tr$Sin, col = 'black', ylim = c(-2,2), xlim = c(0,9))
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2019-01-16/2019-01-16_Assignment2.R', echo=TRUE)
setwd("~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
plot(MET, EX, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data", ylim=c(100,500))
points(MET, predData, type="l", col="blue")
points(MET, confIntNPBoot$point[2,], type="l")
points(MET, confIntNPBoot$point[1,], type="l")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
mle=prune.tree(treemodel, best=3)
summaryMLE = summary(mle)
rng=function(data, mle) {
data1=data.frame(EX=data$EX, MET=data$MET)
n=length(data$EX)
#generatenew EX
data1$EX=rnorm(n,predict(mle, newdata=data1), sd(summaryMLE$residuals))
return(data1)
}
f1=function(data1){
treemodel=tree(EX~MET, data=data1, control=tree.control(48,mincut=8)) #fit linearmodel
prunedtree=prune.tree(treemodel, best=3)
n=length(Dataframe$EX)
#predictvaluesfor all EX values from the original data
predData=predict(prunedtree,newdata=Dataframe)
predictedEX=rnorm(n, predData, sd(summaryMLE$residuals))
return(predictedEX)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
predIntPBoot=envelope(res)
points(MET, predIntPBoot$point[2,], type="l", col="green")
points(MET, predIntPBoot$point[1,], type="l", col="green")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2019-01-16/2019-01-16_Assignment2.R', echo=TRUE)
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 3)
tr <- data.frame(Var, Sin=sin(Var))
Var <- runif(50, 3, 9)
te <- data.frame(Var, Sin=sin(Var))
n = dim(tr)[1]
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(10, -1, 1)
nn=neuralnet(Sin~Var, data=tr, hidden=3, startweights=winit)
plot(nn)
pred=predict(nn, newdata=te)
plot(tr$Var, tr$Sin, xlim=c(0,9), ylim=c(-2,2), xlab="Var", ylab="Sin")
points(te$Var, te$Sin, col="blue")
points(te$Var, pred, col="red")
plot(nn)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment1.R', echo=TRUE)
install.packages(e1071)
install.packages("e1071")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment1.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment1.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
setwd("~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment1.R', echo=TRUE)
View(Dataframe)
mean(predPCA != Dataframe$species)
misclass_naivePCA=misclass(confusion_naivePCA, Dataframe)
misclass(confusion_naivePCA, Dataframe)
help(naiveBayes)
response
View(naiveData)
help("predict.naiveBayes")
View(Dataframe)
print(confusion_naivePCA)
Dataframe$response
Dataframe$species
View(naiveData)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2019-01-16/2019-01-16_Assignment2.R', echo=TRUE)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18")
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=length(seq(12,13,0.05))
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
warnings()
help("predict.glm")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(res)
View(e)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(res)
help("predict.glm")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
predict(linear_model, newdata=Dataframe, type="response")
View(linear_model)
help("predict.glm")
View(res)
View(res)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1, type="response"), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=glm(Visitors~., data=data1, family="poisson") #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)), type="response")
n=length(seq(12,13,0.05))
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
warnings()
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
View(e)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
e[["point"]]
help("predict.glm")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
View(e)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
predict(linear_model, newdata=Dataframe, type="response")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment1.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
setwd("~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Downloads/SpecialTask2019Backpropagation.R', echo=TRUE)
