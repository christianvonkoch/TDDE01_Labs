winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
Var = runif(50, 0, 10)
test = data.frame(Var, Sin=sin(Var))
n=dim(test)[1]
winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
Var = runif(50, 0, 10)
test = data.frame(Var, Sin=sin(Var))
n=dim(test)[1]
winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
Var = runif(50, 0, 10)
test = data.frame(Var, Sin=sin(Var))
n=dim(test)[1]
winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
Var = runif(50, 0, 10)
test = data.frame(Var, Sin=sin(Var))
n=dim(test)[1]
winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
Var = runif(50, 0, 10)
test = data.frame(Var, Sin=sin(Var))
n=dim(test)[1]
winit = runif(31, -1, 1)
finalModel = neuralnet(Sin~Var, data=trva, hidden=10, threshold=4/1000, startweights=winit)
results=as.data.frame(finalModel$net.result)
pred = predict(finalModel, newdata = test)
generror = 1/n*sum((pred-test$Sin)^2)
print(generror)
plot(prediction(finalModel)$rep1)
points(test, col = "red")
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
plot(2:8, trainScore[2:8], type="b", col="red")
plot(2:8, trainScore[2:8], type="b", col="red")
min_deviance=min(trainScore[2:8])
print(min_deviance)
optimal_leaves=which(trainScore[1:8] == min_deviance)
print(optimal_leaves)
plot(treemodel)
text(treemodel, pretty=0)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
RNGversion('3.5.1')
#Read data
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, minsize=8))
summary(treemodel)
trainScore=rep(0,8)
for(i in 2:8){
prunedTree=prune.tree(treemodel, best=i)
trainScore[i]=deviance(prunedTree)
}
plot(2:8, trainScore[2:8], type="b", col="red")
min_deviance=min(trainScore[2:8])
print(min_deviance)
optimal_leaves=which(trainScore[1:8] == min_deviance)
print(optimal_leaves)
plot(treemodel)
text(treemodel, pretty=0)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
help(tree.control)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
trainScore=rep(0,8)
for(i in 2:8){
prunedTree=prune.tree(treemodel, best=i)
trainScore[i]=deviance(prunedTree)
}
plot(2:8, trainScore[2:8], type="b", col="red")
min_deviance=min(trainScore[2:8])
print(min_deviance)
optimal_leaves=which(trainScore[1:8] == min_deviance)
print(optimal_leaves)
plot(treemodel)
text(treemodel, pretty=0)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
help(tree.control)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
trainScore=rep(0,8)
for(i in 2:8){
prunedTree=prune.tree(treemodel, best=i)
trainScore[i]=deviance(prunedTree)
}
plot(2:8, trainScore[2:8], type="b", col="red")
min_deviance=min(trainScore[2:8])
print(min_deviance)
optimal_leaves=which(trainScore[1:8] == min_deviance)
print(optimal_leaves)
plot(treemodel)
text(treemodel, pretty=0)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$dev)
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(cvTreeModel)
help(cv.tree)
cvTreeModel$size
View(cvTreeModel)
View(treemodel)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
plot(cvTreeModel$size, cvTreemodel$dev, type="b", col="red", xlab="Size", ylab="Dev")
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
debugSource('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
title("Optimal tree")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
predData=predict(bestTree, newdata=Dataframe)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
predData
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=3)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
View(bestTree)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
hist(residuals)
sumaryfit=summary(bestTree)
View(sumaryfit)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(summaryfit)
summary(bestTree)
library(boot)
help(boot)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(data2, f, R=1000) #make bootstrap
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l")
points(e$point[2,], type="l", col="blue")
points(e$point[1,], type="l", col="blue")
View(confIntNPBoot)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l")
points(confIntNPBoot$point[2,], type="l", col="blue")
points(confIntNPBoot$point[1,], type="l", col="blue")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l")
points(confIntNPBoot$point[2,], MET, type="l", col="blue")
points(confIntNPBoot$point[1,], MET, type="l", col="blue")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(confIntNPBoot)
confIntNPBoot$points
confIntNPBoot$point
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=3)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
bestTree=prune.tree(treemodel, best=bestSize)
res=boot(Dataframe, f, R=1000) #make bootstrap
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
print(data1)
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(prunedTree)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
help("boot")
help(boot)
help(envelope)
help(family)
help(rnorm)
help(rpoisson)
help("rpois")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
mle=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
rng=function(data, mle) {
data1=data.frame(EX, MET)
n=length(data$EX)
#generatenew EX
data1$EX=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=tree(EX~MET, data=data1) #fit linearmodel
#predictvaluesfor all EX values from the original data
EX=predict(res,newdata=Dataframe)
return(EX)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng  , sim="parametric")
predIntPBoot=envelope(res)
points(predIntPBoot[2,], MET, type="l", col="green")
points(predIntPBoot[1,], MET, type="l", col="green")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f, R=1000) #make bootstrap
res2=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res2=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
View(Dataframe)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(res)
View(predIntPBoot)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
warnings()
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(mle)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
