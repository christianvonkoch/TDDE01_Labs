predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data$Visitors)
print(n)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors")
ylab="Visitors", xlim=c(9,13), ylim=c(30,200)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01, e$point[2,], type="l", lty=21, col="grey"))
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01, e$point[2,], type="l", lty=21, col="grey"))
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey"))
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(Dataframe$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(e)
View(res)
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(res)
library(boot)
rng=function(data, linear_model) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(linear_model, newdata=data1),sd(linear_model$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
print(n)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
help(rnorm)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(res)
help(boot)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
print(predictedVisitors)
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
View(res)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
print(n)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=seq(12,13,0.05))
n=length(data1$Visitors)
print(n)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~Time, data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
print(n)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
help(boot)
View(res)
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=numeric(21), Time=data)
n=length(data1$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
print(predictedVisitors)
return(predictedVisitors)
}
res=boot(seq(12,13,0.05), statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=seq(12,13,0.05)),sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=as.data.frame(seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(Dataframe)
as.data.frame(Time=seq(1,2,0.1))
length(seq(12,13,0.05))
as.matrix(seq(12,13,0.05))
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=as.matrix(seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(seq(12,13,0.05))
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data.frame(Time=seq(12,13,0.05))), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=Dataframe)
n=length(data1$Visitors)
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=21
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.01), e$point[2,], type="l", lty=21, col="grey")
View(res)
View(e)
data.frame(Time=seq(12,13,0.05))
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=21
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="grey")
help(points)
help(curve)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,200))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", lty=21, col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", lty=21, col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", lty=21, col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
plot(seq(12,13,0.05), e$point[2,], type="l", col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
plot(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), e$point[2,], type="l", col="blue")
points(seq(12,13,0.05), e$point[1,], type="l", col="blue")
View(e)
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
View(e)
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=12, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=12, col="gray")
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
library(boot)
rng=function(data, mle) {
data1=data.frame(Visitors=data$Visitors, Time=data$Time)
n=length(data$Visitors)
#generate new Price
data1$Visitors=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=lm(Visitors~., data=data1) #fit linearmodel
#predictvaluesfor all Visitor valuesfrom the original data
Visitors=predict(res,newdata=data.frame(Time=seq(12,13,0.05)))
n=length(seq(12,13,0.05))
predictedVisitors=rnorm(n, Visitors, sd(linear_model$residuals))
return(predictedVisitors)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=linear_model, ran.gen=rng, sim="parametric")
e=envelope(res)
plot(Dataframe$Time, Dataframe$Visitors, main="Forecasting of visitors depending on time", xlab="Time",
ylab="Visitors", xlim=c(9,13), ylim=c(30,500))
points(seq(12,13,0.05), exp(e$point[2,]), type="l", lty=21, col="gray")
points(seq(12,13,0.05), exp(e$point[1,]), type="l", lty=21, col="gray")
min_value_13=exp(e$point[2,21])
max_value_13=exp(e$point[1,21])
help("cat)
help(cat)
help("cat")
cat("The bank should expect between", min_value_13, "and", max_value_13, "customers", sep=" ")
source('~/SKOLA/LIU/Ã…k 4/TDDE01/TDDE01_Labs/Exam/2017-04-18/2017-04-18_Assignment2.R', echo=TRUE)
