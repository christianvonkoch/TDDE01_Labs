points(predData, MET, type="l")
points(e$point[2,], type="l", col="blue")
points(e$point[1,], type="l", col="blue")
View(confIntNPBoot)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l")
points(confIntNPBoot$point[2,], type="l", col="blue")
points(confIntNPBoot$point[1,], type="l", col="blue")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l")
points(confIntNPBoot$point[2,], MET, type="l", col="blue")
points(confIntNPBoot$point[1,], MET, type="l", col="blue")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=data)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(confIntNPBoot)
confIntNPBoot$points
confIntNPBoot$point
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=3)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
bestTree=prune.tree(treemodel, best=bestSize)
res=boot(Dataframe, f, R=1000) #make bootstrap
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
print(data1)
treemodel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treemodel, best=3)
predData=predict(prunedTree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(prunedTree)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
help("boot")
help(boot)
help(envelope)
help(family)
help(rnorm)
help(rpoisson)
help("rpois")
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
mle=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
rng=function(data, mle) {
data1=data.frame(EX, MET)
n=length(data$EX)
#generatenew EX
data1$EX=rnorm(n,predict(mle, newdata=data1), sd(mle$residuals))
return(data1)
}
f1=function(data1){
res=tree(EX~MET, data=data1) #fit linearmodel
#predictvaluesfor all EX values from the original data
EX=predict(res,newdata=Dataframe)
return(EX)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng  , sim="parametric")
predIntPBoot=envelope(res)
points(predIntPBoot[2,], MET, type="l", col="green")
points(predIntPBoot[1,], MET, type="l", col="green")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f, R=1000) #make bootstrap
res2=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res2=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
View(Dataframe)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(res)
View(predIntPBoot)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
warnings()
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(mle)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(EX, MET, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(EX, MET, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(predData, MET, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(EX, MET, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(predData, MET, type="l", col="blue")
points(confIntNPBoot$point[2,], MET, type="l")
points(confIntNPBoot$point[1,], MET, type="l")
mle=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summaryMLE = summary(mle)
rng=function(data, mle) {
data1=data.frame(EX=data$EX, MET=data$MET)
n=length(data$EX)
#generatenew EX
data1$EX=rnorm(n,predict(mle, newdata=data1), sd(summaryMLE$residuals))
return(data1)
}
f1=function(data1){
treemodel=tree(EX~MET, data=data1, control=tree.control(48,mincut=8)) #fit linearmodel
prunedtree=prune.tree(treemodel, best=3)
#predictvaluesfor all EX values from the original data
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
predIntPBoot=envelope(res)
points(predIntPBoot$point[2,], MET, type="l", col="green")
points(predIntPBoot$point[1,], MET, type="l", col="green")
hist(summaryfit$residuals, break=10)
help(hist)
hist(summaryfit$residuals, breaks=10)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
plot(MET, EX, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(MET, predData, type="l", col="blue")
points(MET, confIntNPBoot$point[2,], type="l")
points(MET, confIntNPBoot$point[1,], type="l")
points(MET, predIntPBoot$point[2,], type="l", col="green")
points(MET, predIntPBoot$point[1,], type="l", col="green")
RNGversion('3.5.1')
#Read data
set.seed(12345)
Dataframe=read.csv2("State.csv")
Dataframe=Dataframe[order(Dataframe$MET),]
MET=Dataframe$MET
EX=Dataframe$EX
plot(MET, EX, xlab="EX", ylab="MET", type="p", main="Plot of EX vs MET")
library(tree)
treemodel=tree(EX~MET, data=Dataframe, control=tree.control(48, mincut=8))
summary(treemodel)
plot(treemodel)
text(treemodel, pretty=0)
set.seed(12345)
cvTreeModel = cv.tree(treemodel)
plot(cvTreeModel$size, cvTreeModel$dev, type="b", col="red", xlab="Size", ylab="Dev")
bestSize = cvTreeModel$size[which.min(cvTreeModel$dev)]
bestTree=prune.tree(treemodel, best=bestSize)
plot(bestTree)
text(bestTree, pretty=0)
title("Optimal tree")
predData=predict(bestTree, newdata=Dataframe)
plot(MET, EX, xlab="EX", ylab="MET", type="p", col="red", main="Plot original vs predicted data")
points(MET, predData, col="blue")
summaryfit=summary(bestTree)
residuals=(EX-predData)^2
hist(summaryfit$residuals, breaks=10)
library(boot)
# computingbootstrapsamples
f=function(data, ind){
data1=data[ind,]# extractbootstrapsample
treeModel=tree(EX~MET, data=data1, control=tree.control(48, mincut=8))
prunedtree=prune.tree(treeModel, best=3)
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, f, R=1000) #make bootstrap
confIntNPBoot=envelope(res)
plot(MET, EX, xlab="EX", ylab="MET", pch=21, bg="orange", main="Plot original vs predicted data")
points(MET, predData, type="l", col="blue")
points(MET, confIntNPBoot$point[2,], type="l")
points(MET, confIntNPBoot$point[1,], type="l")
mle=bestTree
summaryMLE = summary(mle)
rng=function(data, mle) {
data1=data.frame(EX=data$EX, MET=data$MET)
n=length(data$EX)
#generatenew EX
data1$EX=rnorm(n,predict(mle, newdata=data1), sd(summaryMLE$residuals))
return(data1)
}
f1=function(data1){
treemodel=tree(EX~MET, data=data1, control=tree.control(48,mincut=8)) #fit linearmodel
prunedtree=prune.tree(treemodel, best=3)
#predictvaluesfor all EX values from the original data
predData=predict(prunedtree,newdata=Dataframe)
return(predData)
}
res=boot(Dataframe, statistic=f1, R=1000, mle=mle, ran.gen=rng, sim="parametric")
predIntPBoot=envelope(res)
points(MET, predIntPBoot$point[2,], type="l", col="green")
points(MET, predIntPBoot$point[1,], type="l", col="green")
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Lab2 Block 1/Lab2_Assignment3.R', echo=TRUE)
View(summaryMLE)
View(summaryMLE)
setwd("//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09")
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
View(Dataframe)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
View(Dataframe)
help("subset")
library(tree)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
text(treemodel, pretty=3)
text(treemodel, pretty=0)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
View(Dataframe_new)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
treemodel=tree(data=train)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
treemodel=tree(Class~., data=train)
plot(treemodel)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
help(plot.tree)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_with_solutions/solutionTDDE01_1.R', echo=TRUE)
setwd("~/Documents/TDDE01/TDDE01_Labs/Exam/exam_with_solutions")
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_with_solutions/solutionTDDE01_1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
setwd("//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09")
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
plot(cv.tree$size, cv.tree$dev, ylab="Deviance", type="b", main="cross-validation plot")
plot(cv.res$size, cv.res$dev, ylab="Deviance", type="b", main="cross-validation plot")
x_train = model.matrix( ~ .-1, train[,-16])
View(x_train)
library(glmnet)
install.packages("glmnet")
library(glmnet)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
optimalTree
View(x_train)
help(glmnet)
View(x_train)
class=as.factor(train$Class)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
lassomodel
summary(lassomodel)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
help("coef")
help(coef.glmnet)
View(lassomodel)
log(-10)
log(-7)
View(optimalTree)
help(glmnet)
help(predict.glmnet)
help(glmnet)
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial", lambda=lassomodel$lambda.min)
pred_lasso=predict(opt_lasso, newdata=test)
View(opt_lasso)
help(predict.glmnet)
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial")
pred_lasso=predict(opt_lasso, s=lassomodel$lambda.min, newdata=test, type="response")
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial")
pred_lasso=predict(opt_lasso, s=lassomodel$lambda.min, newx=test[,-16], type="response")
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial")
pred_lasso=predict(opt_lasso, s=lassomodel$lambda.min, newx=test, type="response")
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial")
pred_lasso=predict(opt_lasso, s=lassomodel$lambda.min, newx=as.matrix(test[,-16]), type="response")
opt_lasso=glmnet(x_train, class, alpha=1, family="binomial")
pred_lasso=predict(opt_lasso, s=lassomodel$lambda.min, newx=as.matrix(test), type="response")
x_test = model.matrix( ~ .-1, test[,-16])
pred_lasso=predict(lassomodel, s=lassomodel$lambda.min, newx=x_test, type="response")
View(pred_lasso)
help(predict.tree)
pred_tree=predict(treemodel, newdata=test, type="vector")
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
View(test)
pred_tree=predict(treemodel, newdata=test, type="vector")
error_tree=errorfunction(test$Class, pred_tree)
View(pred_lasso)
pred_tree=predict(optimalTree, newdata=test, type="vector")
error_tree=errorfunction(test$Class, pred_tree)
error_lasso=errorfunction(test$Class, pred_lasso)
ifelse(error_tree<error_lasso, "Tree", "Lasso")
help(tanh)
library(kernlab)
library(kernlab)
set.seed(12345)
data(spam)
help("ksvm")
help(ksvm)
View(spam)
help(predict.ksvm)
1 %% 2
help(avg)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
avgScore
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment1.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
avgScore
source('~/Documents/TDDE01/TDDE01_Labs/Exam/exam_2016-01-09/Assignment_2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
help("ksvm")
source('//ad.liu.se/home/chrvo878/Documents/TDDE01/TDDE01_Labs/Exam/2016-01-09/2016-01-09_Assignment2.R', echo=TRUE)
finalModel = ksvm(type~., data=spam, kernel="rbfdot", C=5, kpar=list(sigma=0.01), cross=2)
View(finalModel)
?ksvm
